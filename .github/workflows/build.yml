name: build

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
  schedule:
  - cron: "0 0 1 * *"
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    # container: ljmf00/archlinux:devel
    container: ubuntu:24.04
    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y --no-install-recommends ca-certificates git texlive-full texlive-base texlive-xetex texlive-fonts-extra texlive-fonts-recommended texlive-font-utils texlive-latex-base texlive-latex-extra texlive-latex-recommended
    - name: Cache valgrind
      uses: actions/cache@v2
      id: cache-valgrind
      with:
          path: "~/valgrind"
          key: ${{secrets.VALGRIND_VERSION}}
    - name: Install valgrind
      env:
        CACHE_HIT: ${{steps.cache-valgrind.outputs.cache-hit}}
        VALGRIND_VERSION: ${{secrets.VALGRIND_VERSION}}
      run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive ~/valgrind/* /
          else
            sudo apt-get install --yes valgrind="$VALGRIND_VERSION"
            mkdir -p ~/valgrind
            sudo dpkg -L valgrind | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/valgrind/
          fi
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Checkout private data ðŸ”½
      uses: actions/checkout@v4
      with:
        repository: alexjorgef/cv-data
        token: ${{ secrets.DATA_GITHUB_TOKEN }}
        path: cv-data
    - name: Inject data ðŸ”¨
      run: cp -rp cv-data/production/* .
    # - name: Install dependencies
    #   run: |
    #     pacman -Syy --needed --noconfirm --noprogressbar texlive-basic texlive-xetex texlive-fontsextra texlive-fontsrecommended texlive-fontutils texlive-latex texlive-latexextra texlive-latexrecommended
    - name: Build Curriculum Vitae ðŸ”¨
      run: SOURCE_DATE_EPOCH=1 xelatex cv.tex
    - name: Build RÃ©sumÃ© ðŸ”¨
      run: SOURCE_DATE_EPOCH=1 xelatex resume.tex
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        name: cv-artifacts
        path: |
          cv.pdf
          resume.pdf
        if-no-files-found: error
  deploy:
    needs: build
    if: success() && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.ghpages-deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: cv-artifacts
        path: cv-output
    - name: Copy landing page files
      run: cp index.html logo.png favicon.ico cv-output/
    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: cv-output
    - name: Deploy to GitHub Pages
      id: ghpages-deployment
      uses: actions/deploy-pages@v4
    # - name: Upload and pin to Web3 Storage ðŸš€
    #   uses: web3-storage/add-to-web3@59774ff5ca3e7fd57fbd25ad62557a408a6122fc
    #   id: web3storage
    #   with:
    #     web3_token: ${{ secrets.WEB3STORAGE_TOKEN }}
    #     path_to_add: cv-output
    #     wrap_with_directory: false
    # - name: Deploy _dnslink to Cloudflare ðŸš€
    #   run: |
    #     curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE }}/dns_records/${{ secrets.CLOUDFLARE_RECORD }}" \
    #       -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_XAUTH_EMAIL }}" \
    #       -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_XAUTH_KEY }}" \
    #       -H "Content-Type: application/json" \
    #       --data '{"type":"TXT","name":"_dnslink.${{ vars.DNS_CNAME }}","content":"dnslink=/ipfs/${{ steps.web3storage.outputs.cid }}","ttl":1}' > /dev/null 2>&1
